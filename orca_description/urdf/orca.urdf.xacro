<?xml version="1.0"?>

<!-- Coordinates are: x forward, y left, z up; rotation is: roll right, pitch forward, yaw left -->
<!-- See http://www.ros.org/reps/rep-0103.html for details -->

<robot name="orca" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Orca constants -->
  <xacro:property name="TOTAL_MASS" value="10"/>
  <xacro:property name="LENGTH" value="0.457"/>
  <xacro:property name="WIDTH" value="0.338"/>
  <xacro:property name="HEIGHT" value="0.254"/>
  <xacro:property name="FLOAT_X" value="0.12"/>
  <xacro:property name="FLOAT_Y" value="0.11"/>
  <xacro:property name="FLOAT_Z" value="0.07"/>
  <xacro:property name="THRUSTER_X" value="0.15"/>
  <xacro:property name="THRUSTER_Y" value="0.09"/>
  <xacro:property name="THRUSTER_Z" value="-0.009"/>
  <xacro:property name="VERT_THRUSTER_Y" value="0.105"/>
  <xacro:property name="VERT_THRUSTER_Z" value="0.09"/>
  <xacro:property name="BUOYANCY" value="0.09"/>
  <xacro:property name="MASS_Z" value="0.011"/>
  <xacro:property name="FORWARD_FORCE" value="110"/>
  <xacro:property name="REVERSE_FORCE" value="88"/>

  <!-- Physics properties -->
  <xacro:property name="FLUID_DENSITY" value="1029"/>

  <!-- General constants -->
  <xacro:property name="PI" value="3.1415926535897931"/>

  <!-- Materials -->
  <material name="gray"><color rgba="0.5 0.5 0.5 1.0"/></material>
  <material name="blue"><color rgba="0.5 0.5 1.0 1.0"/></material>

  <!-- Thruster origins -->
  <xacro:property name="front_right_origin">
    <origin xyz="${THRUSTER_X} ${-THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${PI/4}"/>
  </xacro:property>
  <xacro:property name="front_left_origin">
    <origin xyz="${THRUSTER_X} ${THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${-PI/4}"/>
  </xacro:property>
  <xacro:property name="rear_right_origin">
    <origin xyz="${-THRUSTER_X} ${-THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${PI*3/4}"/>
  </xacro:property>
  <xacro:property name="rear_left_origin">
    <origin xyz="${-THRUSTER_X} ${THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${-PI*3/4}"/>
  </xacro:property>
  <xacro:property name="vertical_right_origin">
    <origin xyz="0 ${-VERT_THRUSTER_Y} ${VERT_THRUSTER_Z}" rpy="0 0 0"/>
  </xacro:property>
  <xacro:property name="vertical_left_origin">
    <origin xyz="0 ${VERT_THRUSTER_Y} ${VERT_THRUSTER_Z}" rpy="0 0 0"/>
  </xacro:property>

  <!-- Thruster macro -->
  <xacro:macro name="t200" params="name *origin">
    <link name="t200_link_${name}">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry><sphere radius="0.02"/></geometry>
        <material name="gray"/>
      </visual>
      <visual>
        <origin xyz="0 0 -0.07"/>
        <geometry><sphere radius="0.02"/></geometry>
        <material name="gray"/>
      </visual>
      <visual>
        <origin xyz="0 0 -0.035"/>
        <geometry><cylinder length="0.07" radius="0.02"/></geometry>
        <material name="gray"/>
      </visual>
      <visual>
        <origin xyz="0 0 -0.0225"/>
        <geometry><cylinder length="0.045" radius="0.045"/></geometry>
        <material name="gray"/>
      </visual>
    </link>
    <joint name="t200_joint_${name}" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="base_link"/>
      <child link="t200_link_${name}"/>
    </joint>
  </xacro:macro>

  <!-- Base link -->
  <link name="base_link">
    <inertial>
      <origin xyz="0 0 ${MASS_Z}"/> <!-- Center of mass -->
      <mass value="${TOTAL_MASS - BUOYANCY}"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
    <visual>
      <origin xyz="${FLOAT_X} ${FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
      <material name="blue"/>
    </visual>
    <visual>
      <origin xyz="${FLOAT_X} ${-FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
      <material name="blue"/>
    </visual>
    <visual>
      <origin xyz="${-FLOAT_X} ${FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
      <material name="blue"/>
    </visual>
    <visual>
      <origin xyz="${-FLOAT_X} ${-FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
      <material name="blue"/>
    </visual>
    <visual>
      <origin xyz="0 0 0.063" rpy="0 ${PI/2} 0"/>
      <geometry><cylinder length="0.32" radius="0.055"/></geometry>
      <material name="blue"/>
    </visual>
    <visual>
      <origin xyz="0.16 0 0.063" rpy="0 ${PI/2} 0"/>
      <geometry><sphere radius="0.052"/></geometry>
      <material name="blue"/>
    </visual>
    <visual>
      <origin xyz="0 0 -0.05" rpy="0 ${PI/2} 0"/>
      <geometry><cylinder length="0.25" radius="0.045"/></geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <geometry><box size="${LENGTH} ${WIDTH} ${HEIGHT}"/></geometry>
    </collision>
  </link>

  <!-- Attach thrusters to the base_link -->
  <xacro:t200 name="front_right">
    <xacro:insert_block name="front_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="front_left">
    <xacro:insert_block name="front_left_origin"/>
  </xacro:t200>
  <xacro:t200 name="rear_right">
    <xacro:insert_block name="rear_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="rear_left">
    <xacro:insert_block name="rear_left_origin"/>
  </xacro:t200>
  <xacro:t200 name="vertical_right">
    <xacro:insert_block name="vertical_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="vertical_left">
    <xacro:insert_block name="vertical_left_origin"/>
  </xacro:t200>

  <!--
    The BuoyancyPlugin (provided by Gazebo) applies a force that counteracts gravity. Notes:
    1. there's no concept of a water surface, so positively buoyant objects float up forever
    2. the force doesn't vary with water depth
  -->
  <gazebo>
    <plugin name="BuoyancyPlugin" filename="libBuoyancyPlugin.so">
      <fluid_density>${FLUID_DENSITY}</fluid_density>
      <link name="base_link">
        <center_of_volume>0 0 0.06</center_of_volume>
        <volume>${TOTAL_MASS / FLUID_DENSITY}</volume>
      </link>
    </plugin>
  </gazebo>

  <!--
  The DragPlugin (provided by Orca) applies a drag force proportional to velocity^2.
  -->
  <gazebo>
    <plugin name="DragPlugin" filename="libDragPlugin.so">
      <link name="base_link">
        <center_of_mass>0 0 ${MASS_Z}</center_of_mass>
        <tether_attach>-0.25 0 ${THRUSTER_Z}</tether_attach>
        <surface>10</surface>
      </link>
    </plugin>
  </gazebo>

  <!--
    The ThrusterPlugin (provided by Orca) turns ROS messages into thrust forces. Each message contains an array of thrust efforts [-1.0, 1.0].
    The URDF to SDF translation nukes the joints, so we need to copy/paste the joint locations here.
  -->
  <gazebo>
    <plugin name="ThrusterPlugin" filename="libThrusterPlugin.so">
      <ros_topic>/orca_base/control</ros_topic>
      <thruster name="front_right"> <!-- name attributes are ignored; the tag order must match the message array order -->
        <pos_force>${FORWARD_FORCE}</pos_force> <!-- units are N, positive for ccw, negative for cw -->
        <neg_force>${REVERSE_FORCE}</neg_force> <!-- units are N, positive for ccw, negative for cw -->
        <xacro:insert_block name="front_right_origin"/>
      </thruster>
      <thruster name="front_left">
        <pos_force>${FORWARD_FORCE}</pos_force>
        <neg_force>${REVERSE_FORCE}</neg_force>
        <xacro:insert_block name="front_left_origin"/>
      </thruster>
      <thruster name="rear_right">
        <pos_force>${-REVERSE_FORCE}</pos_force>
        <neg_force>${-FORWARD_FORCE}</neg_force>
        <xacro:insert_block name="rear_right_origin"/>
      </thruster>
      <thruster name="rear_left">
        <pos_force>${-REVERSE_FORCE}</pos_force>
        <neg_force>${-FORWARD_FORCE}</neg_force>
        <xacro:insert_block name="rear_left_origin"/>
      </thruster>
      <thruster name="vertical_right">
        <pos_force>${FORWARD_FORCE}</pos_force>
        <neg_force>${REVERSE_FORCE}</neg_force>
        <xacro:insert_block name="vertical_right_origin"/>
      </thruster>
      <thruster name="vertical_left">
        <pos_force>${-REVERSE_FORCE}</pos_force>
        <neg_force>${-FORWARD_FORCE}</neg_force>
        <xacro:insert_block name="vertical_left_origin"/>
      </thruster>
    </plugin>
  </gazebo>

  <!--
    The BarometerPlugin (provided by Orca, wraps a Gazebo altimeter sensor) simulates a barometer sensor such as the BlueRobotics Bar30.
  -->
  <gazebo reference="base_link">
    <sensor name="barometer_sensor" type="altimeter">
      <update_rate>10</update_rate> <!-- Match orca_driver rate -->
      <plugin name="BarometerPlugin" filename="libBarometerPlugin.so">
        <ros_topic>/barometer</ros_topic>
        <fluid_density>${FLUID_DENSITY}</fluid_density>
      </plugin>
    </sensor>
  </gazebo>

  <!--
    The GazeboRosImuSensor (provided by ROS, wraps a Gazebo IMU sensor) simulates an IMU sensor such as the Phidgets 1044.
  -->
  <gazebo reference="base_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <update_rate>125</update_rate> <!-- Match orca_driver rate -->
      <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
        <robotNamespace></robotNamespace>
        <topicName>imu/data</topicName>
        <updateRateHZ>125.0</updateRateHZ> <!-- Match orca_driver rate -->
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>base_link</frameName>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

</robot>
