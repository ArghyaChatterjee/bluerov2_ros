<?xml version="1.0"?>

<!-- Coordinates are: x forward, y left, z up; rotation is: roll right, pitch forward, yaw left -->
<!-- See http://www.ros.org/reps/rep-0103.html for details -->

<robot name="orca" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- BlueROV2 specs -->
  <xacro:property name="THRUSTER_MASS" value="0.344"/> <!-- Per thruster -->
  <xacro:property name="ENCLOSURE_MASS" value="0.5"/> <!-- Electronics enclosure -->
  <xacro:property name="TOTAL_MASS" value="10"/>
  <xacro:property name="LENGTH" value="0.457"/>
  <xacro:property name="WIDTH" value="0.338"/>
  <xacro:property name="HEIGHT" value="0.254"/>
  <xacro:property name="THRUSTER_X" value="0.15"/>
  <xacro:property name="THRUSTER_Y" value="0.1"/>
  <xacro:property name="VERT_THRUSTER_Y" value="0.105"/>
  <xacro:property name="BUOYANCY" value="0.1"/>

  <!-- Physics properties -->
  <xacro:property name="FLUID_DENSITY" value="1000.0"/>

  <!-- General constants -->
  <xacro:property name="PI" value="3.1415926535897931"/>

  <!-- Thruster macro -->
  <xacro:macro name="t200" params="name *origin">

    <link name="t200_link_${name}">

      <inertial>
        <mass value="${THRUSTER_MASS}"/>
        <inertia
          ixx="1.0" ixy="0.0" ixz="0.0"
          iyy="1.0" iyz="0.0"
          izz="1.0"/>
      </inertial>

      <visual>
        <geometry>
          <cylinder length="0.113" radius="0.048"/>
        </geometry>
      </visual>

      <collision>
        <geometry>
          <cylinder length="0.113" radius="0.048"/>
        </geometry>
      </collision>

    </link>

    <joint name="t200_joint_${name}" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="base_link"/>
      <child link="t200_link_${name}"/>
    </joint>

  </xacro:macro>

  <link name="base_link">

    <inertial>
      <origin xyz="0 0 ${-HEIGHT / 3}"/> <!-- Center of mass is low -->
      <mass value="${TOTAL_MASS - 6 * THRUSTER_MASS - ENCLOSURE_MASS - BUOYANCY}"/>
      <inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/>
    </inertial>

    <visual>
      <geometry>
        <box size="${LENGTH} ${WIDTH} 0.01"/>
      </geometry>
      <material name="gray">
        <color rgba="0.5 0.5 0.5 0.5"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <box size="${LENGTH} ${WIDTH} 0.01"/>
      </geometry>
    </collision>

  </link>

  <!-- Attach thrusters to the base_link -->
  <xacro:t200 name="front_right">
    <origin xyz="${THRUSTER_X} ${-THRUSTER_Y} 0" rpy="0 ${PI/2} ${PI*1/4}"/>
  </xacro:t200>
  <xacro:t200 name="front_left">
    <origin xyz="${THRUSTER_X} ${THRUSTER_Y} 0" rpy="0 ${PI/2} ${-PI*1/4}"/>
  </xacro:t200>
  <xacro:t200 name="rear_right">
    <origin xyz="${-THRUSTER_X} ${-THRUSTER_Y} 0" rpy="0 ${PI/2} ${PI*3/4}"/>
  </xacro:t200>
  <xacro:t200 name="rear_left">
    <origin xyz="${-THRUSTER_X} ${THRUSTER_Y} 0" rpy="0 ${PI/2} ${-PI*3/4}"/>
  </xacro:t200>
  <xacro:t200 name="vertical_right">
    <origin xyz="0 ${-VERT_THRUSTER_Y} 0" rpy="0 0 0"/>
  </xacro:t200>
  <xacro:t200 name="vertical_left">
    <origin xyz="0 ${VERT_THRUSTER_Y} 0" rpy="0 0 0"/>
  </xacro:t200>

  <!-- Electronics enclosure -->
  <link name="enclosure_link">

    <inertial>
      <origin rpy="0 ${PI/2} 0" xyz="0 0 0"/>
      <mass value="${ENCLOSURE_MASS}"/>
      <inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/>
    </inertial>

    <visual>
      <origin rpy="0 ${PI/2} 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.32" radius="0.055"/>
      </geometry>
      <material name="blue">
        <color rgba="0 0 0.5 0.5"/>
      </material>
    </visual>

    <collision>
      <origin rpy="0 ${PI/2} 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.32" radius="0.055"/>
      </geometry>
    </collision>

  </link>

  <!-- Attach enclosure link to base link -->
  <joint name="base_link_to_enclosure_link" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="enclosure_link"/>
  </joint>

  <!-- IMU -->
  <link name="imu_link">

    <inertial>
      <origin rpy="${-PI/2} ${-PI/2} 0" xyz="0 0 0"/>
      <mass value="0"/>
      <inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/>
    </inertial>

    <visual>
      <origin rpy="${-PI/2} ${-PI/2} 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.03 0.005"/>
      </geometry>
      <material name="green">
        <color rgba="0 0.5 0 0.5"/>
      </material>
    </visual>

    <collision>
      <origin rpy="${-PI/2} ${-PI/2} 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.03 0.005"/>
      </geometry>
    </collision>

  </link>

  <!-- Attach imu link to base link -->
  <joint name="base_link_to_imu_link" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin rpy="0 0 0" xyz="0.1 -0.025 0.06"/>
  </joint>

  <!--
    Add Gazebo-specific elements to the base_link. See http://gazebosim.org/tutorials/?tut=ros_urdf for a list of allowed elements. 

    The dampingFactor element is translated to the SDF velocity_decay element, and applies to both linear and angular velocity.
    0.01 reduces velocity by 1% for each timestep. By default Gazebo runs 1000 timesteps per second, so 0.01 has a very strong effect.
  -->
  <gazebo reference="base_link">
    <dampingFactor>0.002</dampingFactor>
  </gazebo>

  <!--
    The BuoyancyPlugin (provided by Gazebo) applies a force that counteracts gravity. Notes:
    1. there's no concept of a water surface, so positively buoyant objects float up forever
    2. the force doesn't vary with water depth

    TODO specify a volume for each link, not just the base_link, or remove link refs and let the plugin calc volumes
    TODO make sure all links have the correct mass and size; make sure foam is high and ballast is low, etc. 
  -->
  <gazebo>
    <plugin name="BuoyancyPlugin" filename="libBuoyancyPlugin.so">
      <fluid_density>${FLUID_DENSITY}</fluid_density>
      <link name="base_link">
        <center_of_volume>0 0 ${HEIGHT / 3}</center_of_volume> <!-- Center of volume is directly above center of mass -->
        <volume>${TOTAL_MASS / FLUID_DENSITY}</volume> <!-- Assume neutral buoyancy for now -->
      </link>
    </plugin>
  </gazebo>

  <!--
    The ThrusterPlugin (provided by Orca) turns ROS messages into thrust forces. Each message contains an array of thrust efforts [-1.0, 1.0].
    The URDF to SDF translation nukes the joints, so we need to copy/paste the joint locations here.

    TODO can I pull the joint poses from the collision rectangles?
  -->
  <gazebo>
    <plugin name="ThrusterPlugin" filename="libThrusterPlugin.so">
      <ros_topic>/orca_base/control</ros_topic>
      <thruster name="front_right"> <!-- name attributes are ignored; the tag order must match the message array order -->
        <force>50</force> <!-- units are N, positive for ccw, negative for cw -->
        <origin xyz="${THRUSTER_X} ${-THRUSTER_Y} 0" rpy="0 ${PI/2} ${PI*1/4}"/>
      </thruster>
      <thruster name="front_left">
        <force>50</force>
        <origin xyz="${THRUSTER_X} ${THRUSTER_Y} 0" rpy="0 ${PI/2} ${-PI*1/4}"/>
      </thruster>
      <thruster name="rear_right">
        <force>-50</force> <!-- cw -->
        <origin xyz="${-THRUSTER_X} ${-THRUSTER_Y} 0" rpy="0 ${PI/2} ${PI*3/4}"/>
      </thruster>
      <thruster name="rear_left">
        <force>-50</force> <!-- cw -->
        <origin xyz="${-THRUSTER_X} ${THRUSTER_Y} 0" rpy="0 ${PI/2} ${-PI*3/4}"/>
      </thruster>
      <thruster name="vertical_right">
        <force>50</force>
        <origin xyz="0 ${-VERT_THRUSTER_Y} 0" rpy="0 0 0"/>
      </thruster>
      <thruster name="vertical_left">
        <force>-50</force> <!-- cw -->
        <origin xyz="0 ${VERT_THRUSTER_Y} 0" rpy="0 0 0"/>
      </thruster>
    </plugin>
  </gazebo>

  <!--
    The BarometerPlugin (provided by Orca, wraps a Gazebo altimeter sensor) simulates a barometer sensor such as the BlueRobotics Bar30.
  -->
  <gazebo reference="base_link">
    <sensor name="barometer_sensor" type="altimeter">
      <update_rate>60</update_rate>
      <plugin name="BarometerPlugin" filename="libBarometerPlugin.so">
        <ros_topic>/barometer</ros_topic>
        <fluid_density>${FLUID_DENSITY}</fluid_density>
      </plugin>
    </sensor>
  </gazebo>

  <!--
    The GazeboRosImuSensor (provided by ROS, wraps a Gazebo IMU sensor) simulates an IMU sensor such as the Phidgets 1044.
  -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <update_rate>10</update_rate>
      <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
        <robotNamespace></robotNamespace>
        <topicName>imu/data</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

</robot>
